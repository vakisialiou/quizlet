generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  name               String?
  username           String?             @unique
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  terms              Term[]
  modules            Module[]
  folders            Folder[]
  settings           Settings[]
  simulators         Simulator[]
  folderGroups       FolderGroup[]
  moduleShares       ModuleShare[]
  relationTerms      RelationTerm[]
  relationFolders    RelationFolder[]
  relationSimulators RelationSimulator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String  @db.VarChar(36)
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String   @db.VarChar(36)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Term {
  id              String   @id @default(uuid())
  userId          String   @db.VarChar(36)
  color           Int      @default(0)
  question        String?  @db.VarChar(255)
  questionLang    String?  @default("ru") @db.VarChar(5)
  answer          String?  @db.VarChar(255)
  answerLang      String?  @default("en") @db.VarChar(5)
  association     String?  @db.VarChar(255)
  associationLang String?  @default("en") @db.VarChar(5)
  collapsed       Boolean  @default(false)
  deleted         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])

  relationTerms RelationTerm[]

  @@unique([id])
  @@unique([userId, id])
}

model Simulator {
  id          String  @id @default(uuid())
  userId      String  @db.VarChar(36)
  active      Boolean
  duration    Int?
  status      String  @db.VarChar(20)
  type        String? @db.VarChar(20)
  termId      String? @db.VarChar(36)
  termIds     Json    @default("[]")
  rememberIds Json    @default("[]")
  continueIds Json    @default("[]")
  historyIds  Json    @default("[]")
  settings    Json    @default("{}")
  tracker     Json    @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  relationSimulators RelationSimulator[]

  @@unique([id])
  @@unique([userId, id])
}

model Module {
  id              String   @id @default(uuid())
  userId          String   @db.VarChar(36)
  name            String?  @db.VarChar(255)
  description     String?  @db.Text()
  order           Int      @default(0)
  collapsed       Boolean  @default(false)
  termsCollapsed  Boolean  @default(false)
  groupsCollapsed Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  degreeRate      Float    @default(0)
  markers         Json?

  folderGroups       FolderGroup[]
  moduleShares       ModuleShare[]
  relationTerms      RelationTerm[]
  relationSimulators RelationSimulator[]

  @@unique([id])
  @@index([userId, id])
}

model Folder {
  id             String   @id @default(uuid())
  userId         String   @db.VarChar(36)
  name           String?  @db.VarChar(255)
  order          Int      @default(0)
  collapsed      Boolean  @default(false)
  termsCollapsed Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  degreeRate     Float    @default(0)
  markers        Json?

  user User @relation(fields: [userId], references: [id])

  relationTerms      RelationTerm[]
  relationFolders    RelationFolder[]
  relationSimulators RelationSimulator[]

  @@unique([id])
  @@index([userId, id])
}

model FolderGroup {
  id        String   @id @default(uuid())
  userId    String   @db.VarChar(36)
  moduleId  String   @db.VarChar(36)
  name      String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)

  user            User             @relation(fields: [userId], references: [id])
  module          Module           @relation(fields: [moduleId], references: [id])
  relationFolders RelationFolder[]

  @@unique([id])
  @@index([userId, id])
  @@index([userId, moduleId])
}

model RelationFolder {
  id        String   @id @default(uuid())
  userId    String   @db.VarChar(36)
  groupId   String   @db.VarChar(36)
  folderId  String   @db.VarChar(36)
  createdAt DateTime @default(now())
  order     Int      @default(0)

  user        User        @relation(fields: [userId], references: [id])
  folder      Folder      @relation(fields: [folderId], references: [id])
  folderGroup FolderGroup @relation(fields: [groupId], references: [id])

  @@unique([id])
  @@unique([groupId, folderId])
  @@index([userId, groupId])
  @@index([userId, id])
}

model RelationSimulator {
  id          String   @id @default(uuid())
  userId      String   @db.VarChar(36)
  simulatorId String   @db.VarChar(36)
  folderId    String?  @db.VarChar(36)
  moduleId    String?  @db.VarChar(36)
  createdAt   DateTime @default(now())
  order       Int      @default(0)

  user      User      @relation(fields: [userId], references: [id])
  folder    Folder?   @relation(fields: [folderId], references: [id])
  module    Module?   @relation(fields: [moduleId], references: [id])
  simulator Simulator @relation(fields: [simulatorId], references: [id])

  @@unique([id])
  @@unique([folderId, simulatorId])
  @@unique([moduleId, simulatorId])
  @@index([userId, id])
}

model RelationTerm {
  id        String   @id @default(uuid())
  userId    String   @db.VarChar(36)
  termId    String   @db.VarChar(36)
  folderId  String?  @db.VarChar(36)
  moduleId  String?  @db.VarChar(36)
  createdAt DateTime @default(now())
  order     Int      @default(0)

  user   User    @relation(fields: [userId], references: [id])
  term   Term    @relation(fields: [termId], references: [id])
  folder Folder? @relation(fields: [folderId], references: [id])
  module Module? @relation(fields: [moduleId], references: [id])

  @@unique([id])
  @@unique([folderId, termId])
  @@unique([moduleId, termId])
  @@index([userId, id])
}

model Settings {
  id        String   @id @default(uuid())
  userId    String   @db.VarChar(36)
  modules   Json?
  simulator Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([id])
  @@unique([userId])
}

enum ModuleShareAccess {
  readonly
  editable
}

model ModuleShare {
  id        String            @id @default(uuid())
  ownerId   String            @db.VarChar(36)
  moduleId  String            @db.VarChar(36)
  access    ModuleShareAccess @default(readonly)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  owner  User   @relation(fields: [ownerId], references: [id])
  module Module @relation(fields: [moduleId], references: [id])

  @@unique([id])
  @@unique([moduleId, access])
  @@index([ownerId, id])
}
