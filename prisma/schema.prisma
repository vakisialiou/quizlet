generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  simulators    Simulator[]
  accounts      Account[]
  sessions      Session[]
  folders       Folder[]
  terms         Term[]
  settings      Settings[]
  folderShares  FolderShare[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String  @db.VarChar(36)
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String   @db.VarChar(36)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Term {
  id              String   @id @default(uuid())
  userId          String   @db.VarChar(36)
  folderId        String   @db.VarChar(36)
  order           Int      @default(0)
  question        String?  @db.VarChar(255)
  questionLang    String?  @default("ru") @db.VarChar(5)
  answer          String?  @db.VarChar(255)
  answerLang      String?  @default("en") @db.VarChar(5)
  association     String?  @db.VarChar(255)
  associationLang String?  @default("en") @db.VarChar(5)
  collapsed       Boolean  @default(false)
  deleted         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder          Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)

  relationTerms RelationTerm[]

  @@unique([id])
}

model Simulator {
  id          String  @id @default(uuid())
  userId      String  @db.VarChar(36)
  folderId    String  @db.VarChar(36)
  active      Boolean
  duration    Int?
  status      String  @db.VarChar(20)
  type        String? @db.VarChar(20)
  termId      String? @db.VarChar(36)
  termIds     Json    @default("[]")
  rememberIds Json    @default("[]")
  continueIds Json    @default("[]")
  historyIds  Json    @default("[]")
  settings    Json    @default("{}")
  tracker     Json    @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([id])
}

model RelationTerm {
  id        String   @id @default(uuid())
  termId    String   @db.VarChar(36)
  folderId  String   @db.VarChar(36)
  createdAt DateTime @default(now())

  term   Term   @relation(fields: [termId], references: [id], onDelete: Cascade)
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([id])
  @@unique([termId, folderId])
}

model RelationFolder {
  id            String   @id @default(uuid())
  folderId      String   @db.VarChar(36)
  folderGroupId String   @db.VarChar(36)
  createdAt     DateTime @default(now())

  folder      Folder      @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderGroup FolderGroup @relation(fields: [folderGroupId], references: [id], onDelete: Cascade)

  @@unique([id])
  @@unique([folderId, folderGroupId])
}

model FolderGroup {
  id        String   @id @default(uuid())
  folderId  String   @db.VarChar(36)
  name      String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  folder          Folder           @relation(fields: [folderId], references: [id], onDelete: Cascade)
  relationFolders RelationFolder[]

  @@unique([id])
}

model Folder {
  id          String   @id @default(uuid())
  userId      String   @db.VarChar(36)
  parentId    String?  @db.VarChar(36)
  name        String?  @db.VarChar(255)
  description String?  @db.Text()
  order       Int      @default(0)
  isModule    Boolean  @default(true)
  collapsed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Folder?  @relation("ParentFolders", fields: [parentId], references: [id], onDelete: Cascade)
  children    Folder[] @relation("ParentFolders")
  degreeRate  Float    @default(0)
  markers     Json?

  terms           Term[]
  simulators      Simulator[]
  folderGroups    FolderGroup[]
  relationTerms   RelationTerm[]
  relationFolders RelationFolder[]
  folderShares    FolderShare[]

  @@unique([id])
}

model Settings {
  id        String   @id @default(uuid())
  userId    String   @db.VarChar(36)
  simulator Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id])
  @@unique([userId])
}

enum FolderShareAccess {
  readonly
  editable
}

model FolderShare {
  id          String            @id @default(uuid())
  ownerUserId String            @db.VarChar(36)
  folderId    String            @db.VarChar(36)
  access      FolderShareAccess @default(readonly)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user   User   @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([id])
  @@unique([folderId, access])
  @@index([ownerUserId, id])
}
