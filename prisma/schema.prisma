
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  simulators    Simulator[]
  accounts      Account[]
  sessions      Session[]
  folders       Folder[]
  terms         Term[]
  settings      Settings[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(uuid())
  userId                   String  @db.VarChar(36)
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String   @db.VarChar(36)
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
}

model VerificationToken {
  id         String     @id @default(uuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id         String     @id @default(uuid())
  userId     String     @db.VarChar(36)
  name       String?    @db.VarChar(255)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  terms          Term[]
  simulators     Simulator[]

  @@unique([id])
}

model Term {
  id           String     @id @default(uuid())
  userId       String     @db.VarChar(36)
  folderId     String     @db.VarChar(36)
  sort         Int
  question     String?    @db.VarChar(255)
  questionLang String?    @db.VarChar(5) @default("ru-RU")
  answer       String?    @db.VarChar(255)
  answerLang   String?    @db.VarChar(5) @default("en-GB")
  association  String?    @db.VarChar(255)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([id])
}

model Simulator {
  id          String     @id @default(uuid())
  userId      String     @db.VarChar(36)
  folderId    String     @db.VarChar(36)
  active      Boolean
  duration    Int?
  progress    Int        @default(0)
  status      String     @db.VarChar(20)
  type        String?    @db.VarChar(20)
  termId      String?    @db.VarChar(36)
  termIds     Json       @default("[]")
  rememberIds Json       @default("[]")
  continueIds Json       @default("[]")
  historyIds  Json       @default("[]")
  settings    Json       @default("{}")

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  @@unique([id])
}

model Settings {
  id          String     @id @default(uuid())
  userId      String     @db.VarChar(36)
  simulator   Json
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([id])
  @@unique([userId])
}
